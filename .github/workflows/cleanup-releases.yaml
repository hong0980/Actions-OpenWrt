name: 清理 OpenWrt Releases 和 Tags

on:
  workflow_dispatch:
    inputs:
      keep_per_type:
        description: '每种类型保留的最新release数量 (默认20)'
        required: false
        default: '20'
      confirm_delete:
        description: '必须设置为 "CONFIRM" 才会实际执行删除'
        required: true
        default: 'CONFIRM'
  schedule:
    - cron: '0 20 */15 * *'

jobs:
  delete-Releases-Tags:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置Python环境
        uses: actions/setup-python@v5.6.0
        with:
          python-version: '3.13'

      - name: 安装依赖
        run: pip install PyGithub requests

      - name: 执行清理
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          KEEP_PER_TYPE: ${{ inputs.keep_per_type || 20 }}
          CONFIRM_DELETE: ${{ inputs.confirm_delete || 'DRY-RUN' }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          python - <<EOF
          import os, sys
          import time
          from datetime import datetime
          from collections import defaultdict
          from github import Github, GithubException
          from github import Auth
          import requests

          REPO_NAME = os.getenv('GITHUB_REPOSITORY')
          TARGET_TYPES = {
              'openwrt': ['openwrt', 'opemurt', 'opemwrt'],
              'coolsnowwolf': ['coolsnowwolf'],
              'immortalwrt': ['immortalwrt', 'immortalurt']
          }
          KEEP = int(os.getenv('KEEP_PER_TYPE', 20))
          CONFIRM = os.getenv('CONFIRM_DELETE') == 'CONFIRM'
          GITHUB_TOKEN = os.getenv('GITHUB_TOKEN')

          # 初始化 GitHub 客户端
          gh = Github(auth=Auth.Token(GITHUB_TOKEN))
          repo = gh.get_repo(REPO_NAME)

          def get_release_type(tag_name):
              """根据 tag 名判断 release 类型"""
              for type_name, patterns in TARGET_TYPES.items():
                  if any(p in tag_name.lower() for p in patterns):
                      return type_name
              return None

          def parse_date(tag_name):
              """从 tag 名解析日期"""
              try:
                  parts = tag_name.split('-')
                  if len(parts) >= 3:
                      date_str = '-'.join(parts[:3])
                      return datetime.strptime(date_str, "%Y-%m-%d")
              except ValueError:
                  return datetime(1970, 1, 1)
              return datetime(1970, 1, 1)

          def is_cache_tag(tag_name):
              """检查是否为 -Cache 结尾的 tag"""
              return tag_name.lower().endswith('-cache')

          def check_tag_exists(tag_name):
              """通过 REST API 检查 tag 是否存在"""
              url = f"https://api.github.com/repos/{REPO_NAME}/git/refs/tags/{tag_name}"
              headers = {"Authorization": f"token {GITHUB_TOKEN}", "Accept": "application/vnd.github.v3+json"}
              response = requests.get(url, headers=headers)
              if response.status_code == 200:
                  tag_data = response.json()
                  tag_type = 'annotated' if tag_data['object']['type'] == 'tag' else 'lightweight'
                  print(f"🔍 Tag {tag_name} 存在，类型: {tag_type}, SHA: {tag_data['object']['sha']}")
                  return True
              print(f"🔍 Tag {tag_name} 不存在 (REST API 返回 {response.status_code})")
              return False

          def delete_tag(tag_name):
              """通过 REST API 删除 tag"""
              if not check_tag_exists(tag_name):
                  return False
              url = f"https://api.github.com/repos/{REPO_NAME}/git/refs/tags/{tag_name}"
              headers = {"Authorization": f"token {GITHUB_TOKEN}", "Accept": "application/vnd.github.v3+json"}
              for attempt in range(3):
                  try:
                      response = requests.delete(url, headers=headers)
                      if response.status_code in (204, 200):
                          print(f"✅ 已删除 tag: {tag_name}")
                          return True
                      print(f"❌ 删除 tag 失败 (尝试 {attempt + 1}/3): {tag_name} (状态码: {response.status_code}, 响应: {response.text})")
                      time.sleep(1)
                  except Exception as e:
                      print(f"❌ 删除 tag 失败 (尝试 {attempt + 1}/3): {tag_name} ({str(e)})")
                      time.sleep(1)
              failed_items.append(('tag', tag_name))
              print(f"    手动删除命令: gh api -X DELETE /repos/{REPO_NAME}/git/refs/tags/{tag_name}")
              return False

          # 获取所有 tags
          print("⏳ 正在获取所有 tags ...")
          all_tags = {}
          for tag in repo.get_tags():
              if not is_cache_tag(tag.name):
                  all_tags[tag.name] = tag
              else:
                  print(f"⚠️ 跳过 -Cache tag: {tag.name}")
          print(f"📋 获取到 {len(all_tags)} 个非 -Cache tags")

          # 获取所有 releases 的 tag
          release_tags = set()
          releases_by_type = defaultdict(list)
          for release in repo.get_releases():
              tag = release.tag_name
              if is_cache_tag(tag):
                  print(f"⚠️ 跳过 -Cache release: {tag}")
                  continue
              release_tags.add(tag)
              if release_type := get_release_type(tag):
                  date = parse_date(tag)
                  releases_by_type[release_type].append((date, release, tag))

          if not releases_by_type:
              print("ℹ️ 没有找到符合条件的 releases")

          # 确定要删除的 releases
          to_delete_releases = []
          for release_type, releases in releases_by_type.items():
              releases.sort(key=lambda x: x[0], reverse=True)
              keep = releases[:KEEP]
              delete = releases[KEEP:]

              print(f"\n🔵 {release_type.upper()} 类型:")
              print(f"• 保留最新的 {len(keep)} 个:")
              for i, (date, _, tag) in enumerate(keep, 1):
                  print(f"  {i}. {tag} ({date.date()})")

              if delete:
                  print(f"• 将删除 {len(delete)} 个旧的 releases:")
                  for date, _, tag in delete:
                      print(f"  - {tag} ({date.date()})")
                  to_delete_releases.extend(delete)
              else:
                  print("• 无需删除 releases (数量未超过保留限制)")

          # 查找不关联 release 的 tags
          to_delete_tags = []
          for tag_name, tag_obj in all_tags.items():
              if tag_name not in release_tags and get_release_type(tag_name):
                  date = parse_date(tag_name)
                  to_delete_tags.append((date, tag_name))

          if to_delete_tags:
              to_delete_tags.sort(key=lambda x: x[0], reverse=True)
              print(f"\n🔶 找到 {len(to_delete_tags)} 个不关联 release 的 tags:")
              for date, tag in to_delete_tags:
                  print(f"  - {tag} ({date.date()})")
          else:
              print("\n🔶 没有不关联 release 的 tags")

          if not to_delete_releases and not to_delete_tags:
              print("\n🟢 没有需要删除的 releases 或 tags")
              sys.exit(0)

          if not CONFIRM:
              print("\n🛑 试运行完成，如需实际删除请设置 confirm_delete=CONFIRM")
              sys.exit(0)

          # 实际删除 releases 和 tags
          deleted_count = 0
          failed_items = []

          # 删除 releases
          for date, release, tag in to_delete_releases:
              try:
                  print(f"\n🗑 删除 release: {tag}")
                  release.delete_release()
                  print(f"✅ 已删除 release: {tag}")
                  deleted_count += 1
                  # 删除关联的 tag
                  if delete_tag(tag):
                      deleted_count += 1
              except GithubException as e:
                  print(f"❌ 删除 release 失败: {tag} ({e.data.get('message', str(e))})")
                  failed_items.append(('release', tag))
                  if delete_tag(tag):
                      deleted_count += 1

          # 删除不关联 release 的 tags
          for date, tag in to_delete_tags:
              if delete_tag(tag):
                  deleted_count += 1

          print(f"\n📊 删除结果: {deleted_count}/{len(to_delete_releases) + len(to_delete_tags)} 成功")
          if failed_items:
              print("\n⚠️ 以下 release/tag 需要手动删除:")
              for item_type, item in failed_items:
                  print(f"  - {item_type}: {item}")
                  if item_type == 'tag':
                      print(f"    手动删除命令: gh api -X DELETE /repos/{REPO_NAME}/git/refs/tags/{item}")
          EOF
