name: 清理旧标签与 Release

on:
  workflow_dispatch:
    inputs:
      keep:
        description: "保留最新多少个标签"
        required: false
        default: "20"

jobs:
  clean-old-tags:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
    - name: 设置保留数量变量
      id: vars
      run: echo "KEEP=${{ github.event.inputs.keep }}" >> "$GITHUB_ENV"

    - name: 安装 GitHub CLI
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y -qq gh

    - name: 登录 GitHub CLI
      run: echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

    - name: 清理旧标签（每个系列保留 ${{ env.KEEP }} 个）
      run: |
        PROJECTS=("openwrt" "immortalwrt" "coolsnowwolf")
        for PROJECT in "${PROJECTS[@]}"; do
          echo -e "\n处理 $PROJECT 系列标签..."
          gh api repos/${{ github.repository }}/tags \
            --paginate | jq -r '.[].name' | grep "^20.*-$PROJECT$" | grep -v '\-Cache$' | sort -r > tags.txt

          TAG_COUNT=$(wc -l < tags.txt)
          echo "现有标签数量：$TAG_COUNT"

          if [ "$TAG_COUNT" -le "$KEEP" ]; then
            echo "$PROJECT 系列仅有 $TAG_COUNT 个标签，无需清理。"
            continue
          fi

          # 需要删除的旧标签
          tail -n +$(($KEEP + 1)) tags.txt > tags_to_delete.txt

          while read -r TAG; do
            echo "🔸 删除标签: $TAG"

            # 删除 tag
            gh api -X DELETE repos/${{ github.repository }}/git/refs/tags/$TAG || echo "❗ 删除标签失败或已不存在: $TAG"

            # 查找对应 release ID
            RELEASE_ID=$(gh api repos/${{ github.repository }}/releases --jq ".[] | select(.tag_name == \"$TAG\") | .id")
            if [ -n "$RELEASE_ID" ]; then
              gh api -X DELETE repos/${{ github.repository }}/releases/$RELEASE_ID || echo "❗ 删除 Release 失败: $TAG"
            else
              echo "⚠️ 未找到对应 Release: $TAG"
            fi
          done < tags_to_delete.txt
        done
